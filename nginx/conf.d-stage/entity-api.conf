# Define the upstream entity-api-server to be used by other containers on the same docker network
upstream entity-api-server {
    server localhost:3333;
}

# Port 80 on host maps to 8080 on container
server {
    # Only root can listen on ports below 1024, we use higher-numbered ports
    # since nginx is running under non-root user hubmap
    listen 8080;
    server_name entity-api.stage.hubmapconsortium.org;
    
    location / {
        return 301 https://$host$request_uri;
    }    
}

# Port 443 on host maps to 4430 on container
server {
    # Only root can listen on ports below 1024, we use higher-numbered ports
    # since nginx is running under non-root user hubmap
    listen 4430 ssl; # managed by Certbot
    server_name entity-api.stage.hubmapconsortium.org;
    root /usr/share/nginx/html;

    ssl_certificate /etc/letsencrypt/live/gateway.stage.hubmapconsortium.org/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/gateway.stage.hubmapconsortium.org/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

    # Logging to the mounted volume for outside container access
    access_log /usr/src/app/log/nginx_access_entity-api.log;
    error_log /usr/src/app/log/nginx_error_entity-api.log warn;

    # No auth_request for favicon    
    location = /favicon.ico {
        alias /usr/share/nginx/html/favicon.ico;
    }

    # Exact request URI matching
    location = /api_auth {
        internal;
        # Upstream hubmap-auth server
        # The `hubmap-auth-server` upstream is defined in `hubmap-auth.conf`
        # We can specify the endpoint `api_auth` here but not in the upstream definition
        proxy_pass http://hubmap-auth-server/api_auth;
        # No need to send the POST body
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-Request-Method $request_method;
        proxy_set_header X-Original-URI $request_uri;
        # Here we use $http_host in case the API is listing on a port other than 80.
        # Because $http_host = $host:$port
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location / { 
        # Always enable CORS 
        # Response to preflight requests
        if ($request_method = 'OPTIONS') {
            # The directive `add_header` doesn't work when response status code is 401, 403 or 500
            # The `always` parameter is specified so the header field will be added regardless of the response code
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, OPTIONS' always;
            
            # Custom headers and headers various browsers should be OK with but aren't
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,Authorization, MAuthorization,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            
            # Cache the response to this preflight request in browser for 24 hours (86400 seconds) 
            # without sending another preflight request
            add_header 'Access-Control-Max-Age' 86400 always;
            
            add_header 'Content-Type' 'text/plain; charset=utf-8' always;
            add_header 'Content-Length' 0 always;
            return 204;
        }

        # Response to the original requests (HTTP methods are case-sensitive) with CORS enabled
        if ($request_method ~ (POST|GET|PUT)) {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,Authorization, MAuthorization,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        }
   
        # Send all requests to the '/api_auth' endpoint for authentication and authorization   
        auth_request /api_auth;

        # Once authenticated/authorized, pass reqeusts to the uWSGI server using the "uwsgi" protocol on port 5000
        include uwsgi_params;
        # Here "entity-api" is the hostname defined in `docker-compose.yml`
        # We have to use this hostname because the entity API is running on a different container
        uwsgi_pass uwsgi://entity-api:5000;
    }

}



# entity-api-server
# `http://hubmap-auth:3333` can be used by gateway
# to make calls to entity-api directly bypassing gateway
server {
    # Only root can listen on ports below 1024, we use higher-numbered ports
    # since nginx is running under non-root user hubmap
    listen 3333;
    
    server_name localhost;
    root /usr/share/nginx/html;
 
    # We need this logging for inspecting auth requests from other internal services
    # Logging to the mounted volume for outside container access
    access_log /usr/src/app/log/nginx_access_entity-api-server.log;
    error_log /usr/src/app/log/nginx_error_entity-api-server.log warn;
    
    location = /favicon.ico {
        alias /usr/share/nginx/html/favicon.ico;
    }
    
    # Pass reqeusts to the uWSGI server using the "uwsgi" protocol on port 5000
    location / { 
        include uwsgi_params;
        # Here "entity-api" is the hostname defined in `docker-compose.yml`
        # We have to use this hostname because the entity API is running on a different container
        uwsgi_pass uwsgi://entity-api:5000;
    }

}
